<?xml version="1.0" encoding="UTF-8"?>

<!-- 
status: 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时, 会看到log4j2内部各种详细输出
monitorInterval: Log4j2能够自动检测此配置文件是否修改, 设置间隔秒数。
 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件， 文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 -->
<Configuration status="WARN" monitorInterval="600">

	<Properties>
		<!-- *** 唯一修改点，项目名称 -->
		<Property name="PROJECT_NAME">
			wql
		</Property>
		<!-- 日志保存目录 -->
		<Property name="LOG_BASE_HOME">
			/apps/var/jakarta/logs/
		</Property>
	</Properties>

	<appenders>
		<!-- 这个输出控制台的配置，这里输出除了warn和error级别的信息到System.out -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)
				过滤条件有三个值：ACCEPT(接受), DENY(拒绝) or NEUTRAL(中立).
			 -->
			<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<!-- 
				%d{yyyy-MM-dd HH:mm:ss.SSS}  日期格式
				%5p	%-5p的意思是日志级别输出左对齐，右边以空格填充，%5p的意思是日志级别输出右对齐，左边以空格填充
				%c 全类名 %c{2}表示展示最后的两个类名
				%M 方法名
				%m 日志下信息
				%n 回车换行
			 -->
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p] %c{1}.%M %m%n" />
		</Console>

		<!-- 系统调试日志，也就是全量日志，按天备份一个日志 catalina.out -->
		<!-- fileName为生成的文件名，x为路径，也可以采用相对路径模式，filePattern为时间到达后产生新日志，旧日志的文件名 -->
		<RollingFile name="DebugFile" fileName="${LOG_BASE_HOME}${PROJECT_NAME}/catalina.out"
			filePattern="${LOG_BASE_HOME}${PROJECT_NAME}/catalina_%d{yyyy-MM-dd}.out">
			<!-- 输出格式 -->
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p] %c.%M %m%n" />
			<Policies>
				<!-- 
				TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以interval表示每一天新建一个文件保存日志。
				SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志。 -->
				<TimeBasedTriggeringPolicy modulate="true" interval="1" />
				<!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
				<!-- <SizeBasedTriggeringPolicy size="128KB" /> -->
			</Policies>
			<!-- 最多备份30天以内的日志，此处为策略限制，Delete中可以按自己需要用正则表达式编写 -->
			<!-- DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量 -->
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_BASE_HOME}${PROJECT_NAME}/" maxDepth="1">
					<IfFileName glob="catalina_*.out" />
					<IfLastModified age="15d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>


		<RollingFile name="WarnFile" fileName="${LOG_BASE_HOME}${PROJECT_NAME}/warn.out"
			filePattern="${LOG_BASE_HOME}${PROJECT_NAME}/warn_%d{yyyy-MM-dd}.out">
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p] %c.%M %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy modulate="true" interval="1" />
			</Policies>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_BASE_HOME}${PROJECT_NAME}/" maxDepth="1">
					<IfFileName glob="warn_*.out" />
					<IfLastModified age="15d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>
		
		<!-- 
			filePattern="${LOG_BASE_HOME}${PROJECT_NAME}/$${date:yyyy-mm-dd}_error/error_%d{yyyy-MM-dd-HH-mm-ss}_%i.zip"
			按日期分文件夹，然后分日志文件，%i表示个数
			如果文件模式是以".gz", ".zip", ".bz2", ".deflate", ".pack200", or ".xz"结尾的，将会与后缀相匹配的压缩方案进行压缩文件
		 -->
		<RollingFile name="ErrorFile" fileName="${LOG_BASE_HOME}${PROJECT_NAME}/error.out"
			filePattern="${LOG_BASE_HOME}${PROJECT_NAME}/$${date:yyyy-MM-dd}_error/error_%d{yyyy-MM-dd-HH}_%i.log.zip">
			<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS} %5p] %c{1}.%M %m%n" />
			<Policies>
			
				<!-- 
					TimeBasedTriggeringPolicy 基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数：
					interval:integer型，指定两次封存动作之间的时间间隔。
							单位:以日志的命名精度来确定单位，比如yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟
					modulate:boolean型，说明是否对封存时间进行调制。若modulate=true，则封存时间将以0点为边界进行偏移计算。
							比如，modulate=true，interval=4hours，那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，之后的封存时间依次为08:00，12:00，16:00。。。
				 -->
			
				<!-- <SizeBasedTriggeringPolicy size="1 KB" /> 
					size="3 MB" size="4 GB" 等等都可以定义
				-->
				<TimeBasedTriggeringPolicy modulate="true" interval="1" />
				<SizeBasedTriggeringPolicy size="200 MB" />
			</Policies>
			<!-- DefaultRolloverStrategy字段中加入max=“30”经测试是配合SizeBasedTriggeringPolicy限制%i的存在数量 (相同时间文件-%i的数量)
				如果不做配置，默认是7，这个7指的是上面i的最大值，超过了就会覆盖之前的 
				maxDepth:要访问的目录的最大级别数。
					值为0表示仅访问起始文件（基本路径本身），除非被安全管理者拒绝。
					Integer.MAX_VALUE的值表示应该访问所有级别。默认为1，意思是指定基本目录中的文件。
					例如：
					${LOG_BASE_HOME}${PROJECT_NAME}/$${date:yyyy-MM-dd}_error/error_%d{yyyy-MM-dd-HH}_%i.log.zip
					${LOG_BASE_HOME}${PROJECT_NAME}是0级,$${date:yyyy-MM-dd}_error是1级，error_%d{yyyy-MM-dd-HH}_%i.log.zip是2级
					如果maxDepth=3，那么程序会遍历maxDepth=0,1,2,3级别目录下的所有xx文件
					底层代码原理类似:
						Path startingDir = Paths.get("D:\\test\\git");
        				Stream<Path> walk = Files.walk(startingDir, 3, FileVisitOption.FOLLOW_LINKS);
			-->
			<DefaultRolloverStrategy max="30">
				<Delete basePath="${LOG_BASE_HOME}${PROJECT_NAME}/" maxDepth="2">
					<!-- 匹配删除基本目录下所有满足参数glob等于*/error_*.zip和超过15天或更早的文件。 -->
					<IfFileName glob="*/error_*.zip" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>
		
	</appenders>

	<loggers>

		<root level="debug">
			<appender-ref ref="Console" />
			<appender-ref ref="DebugFile" />
			<appender-ref ref="ErrorFile"/>
		</root>
		<!-- 
		additivity="true 表示不只是在当前logger打印，也会在root打印
		如果设置为false就只会在当前logger打印
		name="warn" 使用方式 private static final Logger loggerWarn = LogManager.getLogger("warn");
		 -->
		<logger name="warn" level="info" additivity="false">
			<appender-ref ref="WarnFile" />
		</logger>
		
		<!--过滤掉spring的一些无用的信息 如果要过滤其他包路径的信息，比如mybatis等，可以继续写logger -->
        <logger name="org.springframework" level="error" additivity="true"></logger>
        
        <!-- 这种方式，可以过滤到com.wql包下的error日志，但是其他级别的日志捕获不到了，暂时不知道什么原因，所以，我有把ErrorFile放进了root -->
        <!-- <logger name="com.wql" level="info" additivity="false">
        	<appender-ref ref="ErrorFile"/>
        </logger> -->

	</loggers>
</Configuration>